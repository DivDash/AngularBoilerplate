fastlane_require "dotenv"

PACKAGE_NAME = "com.angularboilerplate.app"
KEYSTORE_PATH = nil
PLAYSTORE_KEY_PATH = nil
BUNDLE_FILE_PATH = nil
UPDATED_VERSION_CODE = nil

before_all do
  Dotenv.overload ".env.secret"
  KEYSTORE_PATH = Dir.pwd + "/certificate/my-release-key.jks"
  PLAYSTORE_KEY_PATH =Dir.pwd + "/certificate/playstore-app-distribution-key.json"
  BUNDLE_FILE_PATH = "./app/build/outputs/bundle/release/app-release.aab"
end

lane :build_and_distribute do
  run_unit_tests()
  increment_version_code_in_project_gradle()
  build()
  distribute_playstore()
end


desc "Run unit tests."
private_lane :run_unit_tests do
  gradle(
    task: "test"
  )
end

desc "Responsible for fetching version code from play console and incrementing version code."
private_lane :increment_version_code_in_project_gradle do
  version_code_from_play_store_strings = google_play_track_version_codes(
    package_name: PACKAGE_NAME,   # PACKAGE_NAME is a global variable defined earlier
    track:'internal',            # this can be alpha, beta etc.
    json_key: PLAYSTORE_KEY_PATH,
  )
  version_code_from_play_store = version_code_from_play_store_strings[0].to_i
  incremented_version_code = version_code_from_play_store + 1
  UPDATED_VERSION_CODE=incremented_version_code
  increment_version_code(
    gradle_file_path: Dir.pwd + "/../app/build.gradle",
    version_code: incremented_version_code.to_i
  )
end


desc "Build the .aab file"
private_lane :build do
  gradle(
    task: "bundle",
    build_type: "Release",
    properties: {
      "android.injected.signing.store.file" => KEYSTORE_PATH,
      "android.injected.signing.store.password" => ENV['KEYSTORE_PASSWORD'],
      "android.injected.signing.key.alias" => ENV['KEYSTORE_ALIAS'],
      "android.injected.signing.key.password" => ENV['KEYSTORE_PASSWORD']
    }
  )
end

  desc "Responsible for uploading aab to playstore"
  lane :distribute_playstore do
    upload_to_play_store(track: 'internal',
    release_status:"draft",
    aab: "app/build/outputs/bundle/release/app-release.aab"
    )
    
  end


desc "After successful execution of all task, this block is called"
after_all do
  git_add(path: "*")
  git_commit(
    path: "*",
    message: "#" + "UPDATED_VERSION_CODE" + " released"
  )
  
  push_to_git_remote(
  )
end